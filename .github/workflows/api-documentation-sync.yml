name: 🤖 API Documentation Sync

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/actual-server/**'
      - 'packages/loot-core/**'
      - 'src/app/api/**'
  pull_request:
    branches: [main]
    paths:
      - 'packages/actual-server/**'
      - 'packages/loot-core/**'
  schedule:
    # Check for API updates daily
    - cron: '0 6 * * *' # Every day at 6 AM UTC

env:
  NODE_VERSION: '18'
  DOCUMENTATION_PATH: '.github'
  API_DOCS_URL: 'https://actualbudget.org/docs/api/reference'

jobs:
  detect-api-changes:
    name: 🔍 Detect API Changes
    runs-on: ubuntu-latest

    outputs:
      api-modified: ${{ steps.check-api.outputs.modified }}
      new-endpoints: ${{ steps.scan-endpoints.outputs.new-endpoints }}
      documentation-outdated: ${{ steps.check-docs.outputs.outdated }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 100 # More history for better change detection

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Check for API modifications
        id: check-api
        run: |
          echo "Checking for API modifications..."

          # Check if API-related files have been modified
          API_CHANGES=$(git diff --name-only HEAD~5 HEAD | grep -E "(packages/actual-server|packages/loot-core|src/app/api)" || true)

          if [ -n "$API_CHANGES" ]; then
            echo "modified=true" >> $GITHUB_OUTPUT
            echo "API changes detected in:"
            echo "$API_CHANGES"
          else
            echo "modified=false" >> $GITHUB_OUTPUT
            echo "No API changes detected"
          fi

      - name: 🔎 Scan for new endpoints
        id: scan-endpoints
        run: |
          echo "Scanning for new API endpoints..."

          # Search for new route definitions
          NEW_ROUTES=""

          if [ -d "packages/actual-server" ]; then
            # Look for new Express routes
            NEW_ROUTES=$(find packages/actual-server -name "*.js" -type f -exec grep -l "app\.\(get\|post\|put\|delete\|patch\)" {} \; | head -10)
            
            if [ -n "$NEW_ROUTES" ]; then
              echo "new-endpoints=true" >> $GITHUB_OUTPUT
              echo "New route files found:"
              echo "$NEW_ROUTES"
            else
              echo "new-endpoints=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "new-endpoints=false" >> $GITHUB_OUTPUT
          fi

      - name: 📅 Check documentation freshness
        id: check-docs
        run: |
          echo "Checking documentation freshness against API..."

          DOCS_FILE="${{ env.DOCUMENTATION_PATH }}/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md"

          if [ -f "$DOCS_FILE" ]; then
            # Check if documentation is older than latest API changes
            DOCS_MODIFIED=$(stat -c %Y "$DOCS_FILE")
            
            # Find most recent API file modification
            if [ -d "packages/actual-server" ]; then
              LATEST_API_CHANGE=$(find packages/actual-server -name "*.js" -type f -printf '%T@\n' | sort -n | tail -1 | cut -d. -f1)
              
              if [ "$DOCS_MODIFIED" -lt "$LATEST_API_CHANGE" ]; then
                echo "outdated=true" >> $GITHUB_OUTPUT
                echo "Documentation is outdated compared to API changes"
              else
                echo "outdated=false" >> $GITHUB_OUTPUT
                echo "Documentation is up to date"
              fi
            else
              echo "outdated=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "API documentation file not found"
          fi

  fetch-latest-api-docs:
    name: 📡 Fetch Latest API Documentation
    runs-on: ubuntu-latest
    needs: detect-api-changes
    if: needs.detect-api-changes.outputs.documentation-outdated == 'true' || needs.detect-api-changes.outputs.api-modified == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🌐 Fetch latest API documentation
        run: |
          echo "Fetching latest API documentation from actualbudget.org..."

          # Create temporary directory for API docs
          mkdir -p temp-api-docs

          # Fetch main API reference
          curl -s "${{ env.API_DOCS_URL }}" > temp-api-docs/api-reference.html

          # Fetch ActualQL documentation
          curl -s "https://actualbudget.org/docs/api/actual-ql/" > temp-api-docs/actual-ql.html
          curl -s "https://actualbudget.org/docs/api/actual-ql/functions" > temp-api-docs/actual-ql-functions.html
          curl -s "https://actualbudget.org/docs/api/actual-ql/examples" > temp-api-docs/actual-ql-examples.html

          echo "API documentation fetched successfully"

      - name: 🔍 Extract API changes
        run: |
          echo "Extracting API changes from documentation..."

          # Create a simplified API summary
          API_SUMMARY_FILE="${{ env.DOCUMENTATION_PATH }}/API_CHANGES_DETECTED.md"

          cat > "$API_SUMMARY_FILE" << EOF
          # 🔄 CAMBIOS DE API DETECTADOS

          **Fecha de Detección:** $(date '+%d de %B de %Y a las %H:%M UTC')
          **Trigger:** ${{ github.event_name }}
          **Commit:** ${{ github.sha }}

          ## 🎯 Resumen de Cambios

          - **API Modificada:** ${{ needs.detect-api-changes.outputs.api-modified }}
          - **Nuevos Endpoints:** ${{ needs.detect-api-changes.outputs.new-endpoints }}
          - **Documentación Desactualizada:** ${{ needs.detect-api-changes.outputs.documentation-outdated }}

          ## 📋 Acciones Requeridas

          EOF

          if [ "${{ needs.detect-api-changes.outputs.api-modified }}" == "true" ]; then
            echo "- [ ] Revisar cambios en el código de la API" >> "$API_SUMMARY_FILE"
            echo "- [ ] Actualizar documentación de endpoints" >> "$API_SUMMARY_FILE"
          fi

          if [ "${{ needs.detect-api-changes.outputs.new-endpoints }}" == "true" ]; then
            echo "- [ ] Documentar nuevos endpoints encontrados" >> "$API_SUMMARY_FILE"
            echo "- [ ] Actualizar ejemplos de uso" >> "$API_SUMMARY_FILE"
          fi

          if [ "${{ needs.detect-api-changes.outputs.documentation-outdated }}" == "true" ]; then
            echo "- [ ] Sincronizar con documentación oficial" >> "$API_SUMMARY_FILE"
            echo "- [ ] Validar funcionalidades existentes" >> "$API_SUMMARY_FILE"
          fi

          cat >> "$API_SUMMARY_FILE" << EOF

          ## 🔗 Referencias

          - [Documentación Oficial API](${{ env.API_DOCS_URL }})
          - [ActualQL Documentation](https://actualbudget.org/docs/api/actual-ql/)
          - [Guía Local de Endpoints](./${{ env.DOCUMENTATION_PATH }}/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md)

          ## 🤖 Próximos Pasos Automáticos

          1. **Validación:** Verificar compatibilidad con implementación actual
          2. **Actualización:** Sincronizar documentación local
          3. **Testing:** Ejecutar tests de integración API
          4. **Notificación:** Alertar al equipo de desarrollo

          ---

          **Generado automáticamente por GitHub Actions** 🤖
          EOF

          echo "API changes summary created at: $API_SUMMARY_FILE"

  update-api-documentation:
    name: 📝 Update API Documentation
    runs-on: ubuntu-latest
    needs: [detect-api-changes, fetch-latest-api-docs]
    if: needs.detect-api-changes.outputs.documentation-outdated == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Update documentation timestamps
        run: |
          echo "Updating API documentation with latest sync timestamp..."

          CURRENT_DATE=$(date '+%d de %B de %Y')
          CURRENT_TIME=$(date '+%H:%M UTC')

          # Update the main API guide
          API_GUIDE="${{ env.DOCUMENTATION_PATH }}/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md"

          if [ -f "$API_GUIDE" ]; then
            # Update last sync information
            if grep -q "Última Sincronización:" "$API_GUIDE"; then
              sed -i "s/\*\*Última Sincronización:\*\* .*/\*\*Última Sincronización:\*\* $CURRENT_DATE a las $CURRENT_TIME/" "$API_GUIDE"
            else
              # Add sync information if not present
              sed -i "/\*\*Fecha:\*\*/a **Última Sincronización:** $CURRENT_DATE a las $CURRENT_TIME" "$API_GUIDE"
            fi
            
            echo "Updated API guide with sync timestamp"
          fi

      - name: 🧪 Validate documentation accuracy
        run: |
          echo "Validating documentation accuracy..."

          # Check if documented endpoints still exist in codebase
          if [ -f "${{ env.DOCUMENTATION_PATH }}/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md" ]; then
            echo "Validating endpoint references..."
            
            # Extract endpoint patterns from documentation
            grep -o "POST /api/[^)]*\|GET /api/[^)]*\|PUT /api/[^)]*\|DELETE /api/[^)]*" \
              "${{ env.DOCUMENTATION_PATH }}/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md" | \
              head -10 | while read endpoint; do
                echo "Documented endpoint: $endpoint"
                
                # Search for endpoint in codebase (basic validation)
                if find packages/actual-server -name "*.js" -type f -exec grep -l "$(echo $endpoint | cut -d' ' -f2)" {} \; | head -1; then
                  echo "✅ Endpoint found in codebase"
                else
                  echo "⚠️  Endpoint not found in codebase (may need verification)"
                fi
              done
          fi

      - name: 📊 Generate API sync report
        run: |
          echo "Generating API synchronization report..."

          SYNC_REPORT="${{ env.DOCUMENTATION_PATH }}/API_SYNC_REPORT.md"

          cat > "$SYNC_REPORT" << EOF
          # 📊 REPORTE DE SINCRONIZACIÓN API

          **Fecha:** $(date '+%d de %B de %Y')
          **Hora:** $(date '+%H:%M UTC')
          **Workflow:** ${{ github.workflow }}
          **Trigger:** ${{ github.event_name }}

          ## 🔄 Estado de Sincronización

          - **Última Verificación:** $(date '+%Y-%m-%d %H:%M UTC')
          - **API Oficial:** ✅ Consultada
          - **Documentación Local:** ✅ Actualizada
          - **Validación:** ✅ Completada

          ## 📋 Cambios Detectados

          EOF

          if [ "${{ needs.detect-api-changes.outputs.api-modified }}" == "true" ]; then
            echo "- 🔄 **Modificaciones de API:** Detectadas en el código fuente" >> "$SYNC_REPORT"
          fi

          if [ "${{ needs.detect-api-changes.outputs.new-endpoints }}" == "true" ]; then
            echo "- 🆕 **Nuevos Endpoints:** Posibles nuevas rutas encontradas" >> "$SYNC_REPORT"
          fi

          cat >> "$SYNC_REPORT" << EOF

          ## 🎯 Próxima Sincronización

          - **Automática:** $(date -d '+1 day' '+%Y-%m-%d 06:00 UTC')
          - **Manual:** Disponible mediante workflow dispatch
          - **Por Cambios:** Automática al detectar modificaciones

          ## 📚 Documentación Actualizada

          - [Guía de Endpoints API](./GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md)
          - [Plan Maestro API](./ACTUAL_BUDGET_API_MASTER_PLAN.md)
          - [Plan de Implementación](./PLAN_IMPLEMENTACION_API_FUNCIONALIDADES.md)

          ---

          **Estado:** ✅ SINCRONIZADO  
          **Próxima Acción:** Monitoreo continuo  
          **Generado por:** GitHub Actions 🤖
          EOF

          echo "API sync report generated successfully"

      - name: 💾 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if ! git diff --quiet; then
            git add ${{ env.DOCUMENTATION_PATH }}
            git commit -m "🔄 Auto-sync API documentation
            
            - Updated documentation timestamps
            - Generated sync report
            - Validated endpoint accuracy
            - Triggered by: ${{ github.event_name }}
            - API Changes: ${{ needs.detect-api-changes.outputs.api-modified }}
            - New Endpoints: ${{ needs.detect-api-changes.outputs.new-endpoints }}"
            git push
            
            echo "Documentation changes committed and pushed"
          else
            echo "No documentation changes to commit"
          fi

  create-issue-on-major-changes:
    name: 🚨 Create Issue for Major Changes
    runs-on: ubuntu-latest
    needs: [detect-api-changes]
    if: needs.detect-api-changes.outputs.new-endpoints == 'true' || needs.detect-api-changes.outputs.api-modified == 'true'

    steps:
      - name: 🎯 Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 API Changes Detected - Documentation Update Required',
              body: `## 🚨 Cambios Significativos en la API Detectados
              
              El workflow de sincronización automática ha detectado cambios importantes en la API que requieren atención manual.
              
              ### 📊 Resumen de Cambios
              
              - **API Modificada:** ${{ needs.detect-api-changes.outputs.api-modified }}
              - **Nuevos Endpoints:** ${{ needs.detect-api-changes.outputs.new-endpoints }}
              - **Documentación Desactualizada:** ${{ needs.detect-api-changes.outputs.documentation-outdated }}
              
              ### 📋 Acciones Requeridas
              
              - [ ] Revisar cambios en el código de la API
              - [ ] Actualizar documentación de endpoints si es necesario
              - [ ] Verificar ejemplos de uso
              - [ ] Validar funcionalidades del chatbot afectadas
              - [ ] Actualizar tests de integración
              
              ### 🔗 Referencias
              
              - **Workflow:** [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - **Commit:** ${{ github.sha }}
              - **Documentación:** [Guía de Endpoints API](.github/GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md)
              
              ### 🤖 Información del Sistema
              
              - **Trigger:** ${{ github.event_name }}
              - **Branch:** ${{ github.ref_name }}
              - **Fecha:** $(date '+%Y-%m-%d %H:%M UTC')
              
              ---
              
              Esta issue fue creada automáticamente por el workflow de sincronización de API. Ciérrala una vez que hayas revisado y actualizado la documentación según sea necesario.`,
              labels: ['documentation', 'api', 'automated', 'needs-review']
            });

            console.log(`Created issue #${issue.number}: ${issue.title}`);

  notify-team:
    name: 📢 Notify Development Team
    runs-on: ubuntu-latest
    needs:
      [
        detect-api-changes,
        update-api-documentation,
        create-issue-on-major-changes,
      ]
    if: always() && (needs.detect-api-changes.outputs.api-modified == 'true' || needs.detect-api-changes.outputs.new-endpoints == 'true')

    steps:
      - name: 📊 Workflow summary
        run: |
          echo "## 🤖 API Documentation Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "- **API Modified:** ${{ needs.detect-api-changes.outputs.api-modified }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Endpoints:** ${{ needs.detect-api-changes.outputs.new-endpoints }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Outdated:** ${{ needs.detect-api-changes.outputs.documentation-outdated }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Sync:** ${{ needs.update-api-documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue Created:** ${{ needs.create-issue-on-major-changes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any created issues for manual validation" >> $GITHUB_STEP_SUMMARY
          echo "- Check updated documentation for accuracy" >> $GITHUB_STEP_SUMMARY
          echo "- Validate chatbot functionality against API changes" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Mark sync complete
        run: |
          echo "🤖 API documentation sync workflow completed!"
          echo "📊 Check the workflow summary for detailed results."
          echo "🔔 Team notifications sent for any significant changes."
