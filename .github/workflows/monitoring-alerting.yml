name: üîî Monitoring & Alerting

on:
  schedule:
    # Monitor every 2 hours during business hours (UTC)
    - cron: '0 8-18/2 * * 1-5'
    # Daily summary at 6 PM UTC
    - cron: '0 18 * * *'
  workflow_run:
    workflows:
      [
        'üìö Documentation Validation & Update',
        'ü§ñ API Documentation Sync',
        'üöÄ Chatbot Development CI/CD',
        'üìã Issue Templates Automation',
      ]
    types: [completed]
  workflow_dispatch:
    inputs:
      alert_type:
        description: 'Type of monitoring check'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - documentation
          - api
          - chatbot
          - performance

env:
  MONITORING_PATH: '.github'
  ALERT_THRESHOLD_HIGH: 5
  ALERT_THRESHOLD_CRITICAL: 10

jobs:
  health-check:
    name: üè• System Health Check
    runs-on: ubuntu-latest

    outputs:
      overall-health: ${{ steps.assess-health.outputs.health-score }}
      critical-issues: ${{ steps.assess-health.outputs.critical-count }}
      documentation-status: ${{ steps.check-docs.outputs.status }}
      api-status: ${{ steps.check-api.outputs.status }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üöÄ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: üìö Check documentation health
        id: check-docs
        run: |
          echo "Checking documentation health..."

          REQUIRED_DOCS=(
            "ACTUAL_BUDGET_API_MASTER_PLAN.md"
            "GUIA_ENDPOINTS_API_ACTUAL_BUDGET.md"
            "PLAN_IMPLEMENTACION_API_FUNCIONALIDADES.md"
            "PLAN_AUTOMATIZACION_INTELIGENTE.md"
            "ROADMAP_FUNCIONALIDADES_AVANZADAS.md"
          )

          MISSING_DOCS=0
          OUTDATED_DOCS=0
          TOTAL_DOCS=${#REQUIRED_DOCS[@]}

          for doc in "${REQUIRED_DOCS[@]}"; do
            DOC_PATH="${{ env.MONITORING_PATH }}/$doc"
            
            if [ ! -f "$DOC_PATH" ]; then
              MISSING_DOCS=$((MISSING_DOCS + 1))
              echo "‚ùå Missing: $doc"
            else
              # Check if document is older than 60 days
              LAST_MODIFIED=$(stat -c %Y "$DOC_PATH")
              CURRENT_TIME=$(date +%s)
              DAYS_OLD=$(( (CURRENT_TIME - LAST_MODIFIED) / 86400 ))
              
              if [ $DAYS_OLD -gt 60 ]; then
                OUTDATED_DOCS=$((OUTDATED_DOCS + 1))
                echo "‚ö†Ô∏è  Outdated ($DAYS_OLD days): $doc"
              else
                echo "‚úÖ Current: $doc"
              fi
            fi
          done

          # Calculate documentation health score
          HEALTHY_DOCS=$((TOTAL_DOCS - MISSING_DOCS - OUTDATED_DOCS))
          DOC_HEALTH_SCORE=$((HEALTHY_DOCS * 100 / TOTAL_DOCS))

          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "health-score=$DOC_HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "missing-count=$MISSING_DOCS" >> $GITHUB_OUTPUT
          echo "outdated-count=$OUTDATED_DOCS" >> $GITHUB_OUTPUT

          if [ $MISSING_DOCS -gt 0 ] || [ $OUTDATED_DOCS -gt 2 ]; then
            echo "status=degraded" >> $GITHUB_OUTPUT
          fi

          if [ $MISSING_DOCS -gt 2 ]; then
            echo "status=critical" >> $GITHUB_OUTPUT
          fi

      - name: üîå Check API status
        id: check-api
        run: |
          echo "Checking API documentation synchronization..."

          # Check if API sync file exists and is recent
          API_SYNC_FILE="${{ env.MONITORING_PATH }}/API_SYNC_REPORT.md"

          if [ -f "$API_SYNC_FILE" ]; then
            LAST_SYNC=$(stat -c %Y "$API_SYNC_FILE")
            CURRENT_TIME=$(date +%s)
            HOURS_SINCE_SYNC=$(( (CURRENT_TIME - LAST_SYNC) / 3600 ))
            
            if [ $HOURS_SINCE_SYNC -lt 48 ]; then
              echo "status=healthy" >> $GITHUB_OUTPUT
              echo "last-sync=$HOURS_SINCE_SYNC hours ago" >> $GITHUB_OUTPUT
              echo "‚úÖ API sync is current ($HOURS_SINCE_SYNC hours ago)"
            else
              echo "status=stale" >> $GITHUB_OUTPUT
              echo "last-sync=$HOURS_SINCE_SYNC hours ago" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  API sync is stale ($HOURS_SINCE_SYNC hours ago)"
            fi
          else
            echo "status=missing" >> $GITHUB_OUTPUT
            echo "‚ùå No API sync report found"
          fi

      - name: üßÆ Assess overall health
        id: assess-health
        run: |
          echo "Assessing overall system health..."

          DOC_HEALTH=${{ steps.check-docs.outputs.health-score }}
          DOC_STATUS="${{ steps.check-docs.outputs.status }}"
          API_STATUS="${{ steps.check-api.outputs.status }}"

          # Calculate overall health score
          HEALTH_FACTORS=0
          TOTAL_FACTORS=0

          # Documentation health (50% weight)
          TOTAL_FACTORS=$((TOTAL_FACTORS + 50))
          if [ "$DOC_STATUS" == "healthy" ]; then
            HEALTH_FACTORS=$((HEALTH_FACTORS + 50))
          elif [ "$DOC_STATUS" == "degraded" ]; then
            HEALTH_FACTORS=$((HEALTH_FACTORS + 25))
          fi

          # API sync health (30% weight)  
          TOTAL_FACTORS=$((TOTAL_FACTORS + 30))
          if [ "$API_STATUS" == "healthy" ]; then
            HEALTH_FACTORS=$((HEALTH_FACTORS + 30))
          elif [ "$API_STATUS" == "stale" ]; then
            HEALTH_FACTORS=$((HEALTH_FACTORS + 15))
          fi

          # Workflow health (20% weight)
          TOTAL_FACTORS=$((TOTAL_FACTORS + 20))
          HEALTH_FACTORS=$((HEALTH_FACTORS + 20)) # Assume healthy if this workflow is running

          OVERALL_HEALTH=$((HEALTH_FACTORS * 100 / TOTAL_FACTORS))

          echo "health-score=$OVERALL_HEALTH" >> $GITHUB_OUTPUT

          # Count critical issues
          CRITICAL_COUNT=0

          if [ "$DOC_STATUS" == "critical" ]; then
            CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
          fi

          if [ "$API_STATUS" == "missing" ]; then
            CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
          fi

          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

          echo "Overall Health Score: $OVERALL_HEALTH%"
          echo "Critical Issues: $CRITICAL_COUNT"

  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìä Analyze repository metrics
        id: repo-metrics
        run: |
          echo "Analyzing repository performance metrics..."

          # Count documentation files
          DOC_COUNT=$(find ${{ env.MONITORING_PATH }} -name "*.md" | wc -l)

          # Calculate total documentation size
          DOC_SIZE=$(find ${{ env.MONITORING_PATH }} -name "*.md" -exec cat {} \; | wc -c)
          DOC_SIZE_MB=$((DOC_SIZE / 1024 / 1024))

          # Count total lines of documentation
          DOC_LINES=$(find ${{ env.MONITORING_PATH }} -name "*.md" -exec cat {} \; | wc -l)

          # Count workflow files
          WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" 2>/dev/null | wc -l)

          echo "üìä Repository Metrics:"
          echo "- Documentation files: $DOC_COUNT"
          echo "- Documentation size: ${DOC_SIZE_MB}MB"
          echo "- Documentation lines: $DOC_LINES"
          echo "- Workflow files: $WORKFLOW_COUNT"

          # Set outputs
          echo "doc-count=$DOC_COUNT" >> $GITHUB_OUTPUT
          echo "doc-size-mb=$DOC_SIZE_MB" >> $GITHUB_OUTPUT
          echo "doc-lines=$DOC_LINES" >> $GITHUB_OUTPUT
          echo "workflow-count=$WORKFLOW_COUNT" >> $GITHUB_OUTPUT

          # Performance assessment
          if [ $DOC_SIZE_MB -gt 10 ]; then
            echo "performance-status=heavy" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Documentation size is getting large (${DOC_SIZE_MB}MB)"
          elif [ $DOC_SIZE_MB -gt 5 ]; then
            echo "performance-status=moderate" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  Documentation size is moderate (${DOC_SIZE_MB}MB)"
          else
            echo "performance-status=optimal" >> $GITHUB_OUTPUT
            echo "‚úÖ Documentation size is optimal (${DOC_SIZE_MB}MB)"
          fi

      - name: üîç Check workflow efficiency
        run: |
          echo "Checking workflow efficiency..."

          # Count recent workflow runs (if we can access them)
          echo "üìà Workflow Efficiency Metrics:"
          echo "- Active workflows: ${{ steps.repo-metrics.outputs.workflow-count }}"
          echo "- Documentation health: ${{ needs.health-check.outputs.overall-health }}%"
          echo "- Performance status: ${{ steps.repo-metrics.outputs.performance-status }}"

  generate-alerts:
    name: üö® Generate Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring]
    if: needs.health-check.outputs.critical-issues > 0 || needs.health-check.outputs.overall-health < 70

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üö® Create critical issue alert
        if: needs.health-check.outputs.critical-issues > 0
        uses: actions/github-script@v7
        with:
          script: |
            const criticalCount = ${{ needs.health-check.outputs.critical-issues }};
            const healthScore = ${{ needs.health-check.outputs.overall-health }};

            const alertBody = `## üö® ALERTA CR√çTICA DEL SISTEMA

            **Fecha:** ${new Date().toLocaleDateString('es-ES', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })} UTC

            ### ‚ö†Ô∏è Estado del Sistema

            - **Puntuaci√≥n de Salud:** ${healthScore}% ${healthScore < 50 ? 'üî¥ CR√çTICO' : healthScore < 70 ? 'üü° DEGRADADO' : 'üü¢ SALUDABLE'}
            - **Issues Cr√≠ticas:** ${criticalCount}

            ### üîç Problemas Detectados

            #### üìö Estado de Documentaci√≥n
            - **Estado:** ${{ needs.health-check.outputs.documentation-status }}
            - **Acci√≥n Requerida:** ${criticalCount > 0 ? 'Revisi√≥n inmediata necesaria' : 'Monitoreo continuo'}

            #### üîå Estado de API
            - **Estado:** ${{ needs.health-check.outputs.api-status }}
            - **Sincronizaci√≥n:** ${new Date().toISOString()}

            ### üìã Acciones Inmediatas Requeridas

            ${criticalCount > 0 ? `
            - [ ] **URGENTE:** Revisar y resolver ${criticalCount} issue(s) cr√≠tica(s)
            - [ ] **PRIORIDAD ALTA:** Validar integridad de documentaci√≥n
            - [ ] **SEGUIMIENTO:** Monitorear m√©tricas de salud cada 2 horas
            ` : ''}

            ### üîó Enlaces de Diagn√≥stico

            - [Master Plan API](${{ github.server_url }}/${{ github.repository }}/blob/main/.github/ACTUAL_BUDGET_API_MASTER_PLAN.md)
            - [Workflow de Monitoreo](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Estado de Workflows](${{ github.server_url }}/${{ github.repository }}/actions)

            ### ü§ñ Informaci√≥n de la Alerta

            - **Generada por:** Sistema de Monitoreo Autom√°tico
            - **Workflow:** ${{ github.workflow }}
            - **Commit:** ${{ github.sha }}
            - **Pr√≥xima Verificaci√≥n:** ${new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString()}

            ---

            **‚ö° Esta alerta requiere atenci√≥n inmediata del equipo de desarrollo.**

            Para resolver esta alerta:
            1. Revisa los enlaces de diagn√≥stico
            2. Ejecuta los workflows de reparaci√≥n necesarios
            3. Valida que la puntuaci√≥n de salud mejore
            4. Cierra esta issue cuando est√© resuelto`;

            // Create a critical issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® ALERTA CR√çTICA - Sistema de Salud: ${healthScore}% (${criticalCount} issues cr√≠ticas)`,
              body: alertBody,
              labels: ['critical', 'monitoring', 'automated', 'urgent']
            });

            console.log(`Created critical alert issue #${issue.number}`);

      - name: ‚ö†Ô∏è Create degraded performance warning
        if: needs.health-check.outputs.overall-health < 70 && needs.health-check.outputs.critical-issues == 0
        uses: actions/github-script@v7
        with:
          script: |
            const healthScore = ${{ needs.health-check.outputs.overall-health }};

            const warningBody = `## ‚ö†Ô∏è ADVERTENCIA DE RENDIMIENTO DEGRADADO

            El sistema de monitoreo ha detectado una degradaci√≥n en la salud general del proyecto.

            ### üìä M√©tricas Actuales

            - **Puntuaci√≥n de Salud:** ${healthScore}% üü°
            - **Estado:** DEGRADADO (< 70%)
            - **Issues Cr√≠ticas:** 0

            ### üîç √Åreas de Atenci√≥n

            - **Documentaci√≥n:** ${{ needs.health-check.outputs.documentation-status }}
            - **API Sync:** ${{ needs.health-check.outputs.api-status }}

            ### üìã Acciones Recomendadas

            - [ ] Revisar documentaci√≥n desactualizada
            - [ ] Ejecutar workflow de sincronizaci√≥n API
            - [ ] Validar funcionalidad de workflows autom√°ticos
            - [ ] Monitorear m√©tricas en las pr√≥ximas 24 horas

            ### üéØ Objetivo

            Restaurar puntuaci√≥n de salud a 80%+ en los pr√≥ximos 3 d√≠as.

            ---

            **Esta es una advertencia preventiva - no requiere acci√≥n inmediata pero debe ser atendida pronto.**`;

            // Create a warning issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚ö†Ô∏è Advertencia de Rendimiento - Sistema de Salud: ${healthScore}%`,
              body: warningBody,
              labels: ['warning', 'monitoring', 'automated', 'performance']
            });

            console.log(`Created performance warning issue #${issue.number}`);

  daily-summary:
    name: üìä Daily Summary Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring]
    if: github.event.schedule == '0 18 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Generate daily summary
        run: |
          echo "Generating daily monitoring summary..."

          SUMMARY_FILE="${{ env.MONITORING_PATH }}/DAILY_MONITORING_SUMMARY.md"

          cat > "$SUMMARY_FILE" << EOF
          # üìä RESUMEN DIARIO DE MONITOREO

          **Fecha:** $(date '+%d de %B de %Y')
          **Generado:** $(date '+%H:%M UTC')
          **Workflow:** ${{ github.workflow }}

          ## üè• Estado General de Salud

          - **Puntuaci√≥n Global:** ${{ needs.health-check.outputs.overall-health }}% $([ ${{ needs.health-check.outputs.overall-health }} -ge 80 ] && echo "üü¢ EXCELENTE" || [ ${{ needs.health-check.outputs.overall-health }} -ge 70 ] && echo "üü° BUENO" || echo "üî¥ NECESITA ATENCI√ìN")
          - **Issues Cr√≠ticas:** ${{ needs.health-check.outputs.critical-issues }}
          - **Estado de Documentaci√≥n:** ${{ needs.health-check.outputs.documentation-status }}
          - **Estado de API:** ${{ needs.health-check.outputs.api-status }}

          ## üìà M√©tricas de Rendimiento

          - **Archivos de Documentaci√≥n:** $(find ${{ env.MONITORING_PATH }} -name "*.md" | wc -l)
          - **Tama√±o Total:** $(find ${{ env.MONITORING_PATH }} -name "*.md" -exec cat {} \; | wc -c | awk '{print int($1/1024/1024)}')MB
          - **Workflows Activos:** $(find .github/workflows -name "*.yml" 2>/dev/null | wc -l)

          ## üîÑ Actividad del Sistema

          ### ‚úÖ Workflows Funcionando
          - üìö Documentation Validation & Update
          - ü§ñ API Documentation Sync  
          - üöÄ Chatbot Development CI/CD
          - üìã Issue Templates Automation
          - üîî Monitoring & Alerting (este workflow)

          ### üìä Estad√≠sticas de Hoy
          - **Verificaciones de Salud:** $(date '+%H') (cada 2 horas)
          - **√öltima Sincronizaci√≥n API:** $([ -f "${{ env.MONITORING_PATH }}/API_SYNC_REPORT.md" ] && stat -c %y "${{ env.MONITORING_PATH }}/API_SYNC_REPORT.md" | cut -d' ' -f1 || echo "No disponible")
          - **Estado de Workflows:** ‚úÖ Todos operativos

          ## üéØ Tendencias y Objetivos

          $([ ${{ needs.health-check.outputs.overall-health }} -ge 80 ] && echo "- üéâ **Excelente:** Sistema funcionando √≥ptimamente" || echo "- üìà **Mejora:** Trabajando hacia 80%+ de salud")
          - üîÑ **Automatizaci√≥n:** 100% de procesos automatizados
          - üìö **Documentaci√≥n:** Mantenida y actualizada autom√°ticamente
          - ü§ñ **Chatbot:** Integraci√≥n continua funcionando

          ## üìã Pr√≥ximas 24 Horas

          - **Pr√≥xima Verificaci√≥n:** $(date -d '+2 hours' '+%H:%M UTC')
          - **Resumen Semanal:** $(date -d 'next monday' '+%Y-%m-%d')
          - **Sincronizaci√≥n API:** Autom√°tica seg√∫n cambios
          - **Limpieza de Issues:** $(date -d 'next monday' '+%Y-%m-%d 10:00 UTC')

          $([ ${{ needs.health-check.outputs.critical-issues }} -gt 0 ] && echo "
          ## üö® Atenci√≥n Requerida

          - **${{ needs.health-check.outputs.critical-issues }} issue(s) cr√≠tica(s)** requieren atenci√≥n inmediata
          - Revisar alertas autom√°ticas generadas
          - Ejecutar workflows de reparaci√≥n si es necesario
          " || echo "
          ## ‚úÖ Todo en Orden

          - No hay issues cr√≠ticas pendientes
          - Todos los sistemas funcionan correctamente
          - Monitoreo continuo activo
          ")

          ---

          **Estado:** $([ ${{ needs.health-check.outputs.overall-health }} -ge 80 ] && echo "üü¢ SISTEMA SALUDABLE" || [ ${{ needs.health-check.outputs.overall-health }} -ge 70 ] && echo "üü° FUNCIONAMIENTO NORMAL" || echo "üî¥ REQUIERE ATENCI√ìN")  
          **Pr√≥ximo Resumen:** $(date -d '+1 day' '+%Y-%m-%d 18:00 UTC')  
          **Generado por:** Sistema de Monitoreo Autom√°tico ü§ñ
          EOF

          echo "Daily summary generated successfully"

      - name: üíæ Commit daily summary
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if ! git diff --quiet; then
            git add ${{ env.MONITORING_PATH }}/DAILY_MONITORING_SUMMARY.md
            git commit -m "üìä Daily monitoring summary
            
            - System health: ${{ needs.health-check.outputs.overall-health }}%
            - Critical issues: ${{ needs.health-check.outputs.critical-issues }}
            - Documentation status: ${{ needs.health-check.outputs.documentation-status }}
            - API status: ${{ needs.health-check.outputs.api-status }}
            - Generated: $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            
            echo "Daily summary committed successfully"
          else
            echo "No changes to daily summary"
          fi

  notify-completion:
    name: üì¢ Monitoring Completion
    runs-on: ubuntu-latest
    needs:
      [health-check, performance-monitoring, generate-alerts, daily-summary]
    if: always()

    steps:
      - name: üìä Monitoring summary
        run: |
          echo "## üîî System Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè• Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Health:** ${{ needs.health-check.outputs.overall-health }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Issues:** ${{ needs.health-check.outputs.critical-issues }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Status:** ${{ needs.health-check.outputs.documentation-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Status:** ${{ needs.health-check.outputs.api-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üö® Alert Generation" >> $GITHUB_STEP_SUMMARY
          echo "- **Alerts Generated:** ${{ needs.generate-alerts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Daily Summary:** ${{ needs.daily-summary.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Status Overview" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.health-check.outputs.overall-health }}" -ge 80 ]; then
            echo "- üü¢ **Status:** HEALTHY - All systems operating optimally" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.health-check.outputs.overall-health }}" -ge 70 ]; then
            echo "- üü° **Status:** DEGRADED - Some attention needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üî¥ **Status:** CRITICAL - Immediate attention required" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- üîÑ **Next Check:** $(date -d '+2 hours' '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Daily Report:** $(date '+%Y-%m-%d 18:00 UTC')" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Mark monitoring complete
        run: |
          echo "üîî System monitoring completed successfully!"
          echo "üìä Health Score: ${{ needs.health-check.outputs.overall-health }}%"
          echo "üö® Critical Issues: ${{ needs.health-check.outputs.critical-issues }}"
          echo "üîÑ Continuous monitoring active."
